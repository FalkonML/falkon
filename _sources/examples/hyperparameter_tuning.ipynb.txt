{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Hyperparameter Tuning with Falkon\n",
    "\n",
    "## Introduction\n",
    "\n",
    "We use Falkon for a multi-class problem (on the [digits](https://archive.ics.uci.edu/ml/datasets/Optical+Recognition+of+Handwritten+Digits) dataset), showing how to integrate it into scikit-learn\n",
    "for hyperparameter optimization.\n",
    "\n",
    "Since both `Falkon` and `LogisticFalkon` are estimators, and follow scikit-learn's API, integration is seamless."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from sklearn import datasets, model_selection, metrics\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import torch\n",
    "import matplotlib.pyplot as plt\n",
    "plt.style.use('ggplot')\n",
    "\n",
    "import falkon"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Load the data\n",
    "\n",
    "We use the **digits** dataset, which is distributed alongside scikit-learn."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "X, Y = datasets.load_digits(return_X_y=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Label: 1\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, ax = plt.subplots()\n",
    "_ = ax.matshow(X[1].reshape((8, 8)), cmap='gray')\n",
    "print(\"Label: %d\" % Y[1])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split into training and test sets\n",
    "\n",
    "We split the data into a training set with 80% of the samples and a test set with the remaining 20%."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, Y_train, Y_test = model_selection.train_test_split(\n",
    "    X, Y, test_size=0.2, random_state=10, shuffle=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Preprocessing\n",
    "\n",
    "As always with Falkon we must:\n",
    " 1. Convert from numpy arrays to torch tensors\n",
    " 2. Convert data and labels to the same data-type (in this case float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train = torch.from_numpy(X_train).to(dtype=torch.float32)\n",
    "X_test = torch.from_numpy(X_test).to(dtype=torch.float32)\n",
    "Y_train = torch.from_numpy(Y_train)\n",
    "Y_test = torch.from_numpy(Y_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Normalizing the data is always a good idea. Here we use the global mean and standard deviation of the training set for z-score normalization."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# z-score normalization\n",
    "train_mean = X_train.mean()\n",
    "train_std = X_train.std()\n",
    "X_train -= train_mean\n",
    "X_train /= train_std\n",
    "X_test -= train_mean\n",
    "X_test /= train_std"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since Falkon optimizes with respect to the square loss, using ordinal labels (e.g. 1, 4, 5) is not ideal since closeness in the natural numbers is meaningless for classification. We therefore convert the labels to a 1-hot representation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First label vector:  tensor([0., 0., 1., 0., 0., 0., 0., 0., 0., 0.])\n"
     ]
    }
   ],
   "source": [
    "# Convert labels to 1-hot\n",
    "eye = torch.eye(10, dtype=torch.float32)\n",
    "Y_train = eye[Y_train]\n",
    "Y_test = eye[Y_test]\n",
    "print(\"First label vector: \", Y_train[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Search for the optimal parameters\n",
    "\n",
    "Since Falkon (with the Gaussian kernel) has only 3 important hyperparameters, it is entirely feasible to run a grid search over them to find the best parameter settings.\n",
    "\n",
    "Scikit-learn has great support for this, with the `GridSearchCV` class. For each paramater setting it will run 5-fold cross-validation on the training set, to determine which has the best results.\n",
    "\n",
    "Given the dataset is quite small, and Falkon is fast, we can run 160 model evaluations in around 40 seconds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "def mclass_loss(true, pred):\n",
    "    true = torch.argmax(true, dim=1)\n",
    "    pred = torch.argmax(pred, dim=1)\n",
    "    return torch.mean((true != pred).to(torch.float32))\n",
    "mclass_scorer = metrics.make_scorer(mclass_loss, greater_is_better=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The parameter settings which will be explored by the grid-search are:\n",
    " - four different kernel length-scales (varying around small positive numbers, which are usually good for normalized data)\n",
    " - four different regularization values\n",
    " - two different values for M: the number of inducing points. As we will see, a larger `M` is almost always better than a smaller one (but it leads to longer training times). \n",
    "   Of course this is not the case if the dataset is easy to overfit, since reducing `M` may also provide additional regularization.\n",
    "\n",
    "When we create the estimator we pass it additional parameters via the `FalkonOptions` class.\n",
    "In our case we want to ensure that the model runs on the CPU by setting `use_cpu=True`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/giacomo/Dropbox/unige/falkon/falkon/falkon/utils/helpers.py:31: UserWarning: Failed to initialize cuBLAS library; falling back to CPU. Set 'use_cpu' to True to avoid this warning.\n",
      "Error encountered was cublas library not found\n",
      "  warnings.warn(get_error_str(\"cuBLAS\", e))\n"
     ]
    }
   ],
   "source": [
    "parameter_grid = {\n",
    "    'kernel': [falkon.kernels.GaussianKernel(sigma=1), \n",
    "               falkon.kernels.GaussianKernel(sigma=5), \n",
    "               falkon.kernels.GaussianKernel(sigma=10),\n",
    "               falkon.kernels.GaussianKernel(sigma=15),],\n",
    "    'penalty': [1e-3, 1e-5, 1e-7, 1e-9],\n",
    "    'M': [500, 1000],\n",
    "}\n",
    "estimator = falkon.Falkon(\n",
    "    kernel=falkon.kernels.GaussianKernel(1), penalty=1e-3, M=1000, maxiter=10,\n",
    "    options=falkon.FalkonOptions(use_cpu=True))\n",
    "\n",
    "grid_search = model_selection.GridSearchCV(estimator, parameter_grid, mclass_scorer, cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best parameters are:  {'M': 1000, 'kernel': GaussianKernel(sigma=5.0), 'penalty': 1e-07}\n",
      "CPU times: user 2min 5s, sys: 17 s, total: 2min 22s\n",
      "Wall time: 35.6 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "grid_search.fit(X_train, Y_train)\n",
    "print(\"The best parameters are: \", grid_search.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Evaluating the model\n",
    "We evaluate the model on the held-out set and see that we obtain a respectable 1% error on 10 classes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CPU times: user 1.14 s, sys: 143 ms, total: 1.29 s\n",
      "Wall time: 323 ms\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "flk = grid_search.best_estimator_\n",
    "flk.fit(X_train, Y_train)\n",
    "test_pred = flk.predict(X_test)\n",
    "train_pred = flk.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training error: 0.00%\n",
      "Test error: 1.11%\n"
     ]
    }
   ],
   "source": [
    "print(\"Training error: %.2f%%\" % (mclass_loss(Y_train, train_pred) * 100))\n",
    "print(\"Test error: %.2f%%\" % (mclass_loss(Y_test, test_pred) * 100))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Plot grid-search results\n",
    "\n",
    "Plotting results from a grid-search is always useful, since it shows the range of parameters which were successful.\n",
    "If the initial grid was too coarse, one could then run a second grid search to obtain even better accuracy.\n",
    "\n",
    "In the plot red indicates a high error, while darker blue indicates a low error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "res_df = pd.DataFrame.from_dict(grid_search.cv_results_)\n",
    "res_df[\"M\"] = res_df.params.apply(lambda x: x.get(\"M\"))\n",
    "res_df[\"penalty\"] = res_df.params.apply(lambda x: x.get(\"penalty\"))\n",
    "res_df[\"sigma\"] = res_df.params.apply(lambda x: x.get(\"kernel\").sigma.item())\n",
    "res_df = res_df[[\"mean_test_score\", \"M\", \"penalty\", \"sigma\"]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_heatmap(ax, df, xlabel, ylabel, value, scale):\n",
    "    piv = pd.pivot_table(df, index=ylabel, columns=xlabel, values=value)\n",
    "    cmap = plt.cm.get_cmap('coolwarm_r', 20)\n",
    "    c = ax.pcolormesh(piv, cmap=cmap, vmin=scale[0], vmax=scale[1])\n",
    "    ax.set_yticks(np.arange(piv.shape[0]) + 0.5, minor=False)\n",
    "    ax.set_xticks(np.arange(piv.shape[1]) + 0.5, minor=False)\n",
    "    ax.set_xticklabels(piv.columns, minor=False)\n",
    "    ax.set_yticklabels(piv.index, minor=False)\n",
    "    ax.set_xlabel(xlabel)\n",
    "    ax.set_ylabel(ylabel)\n",
    "    return c"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig, axs = plt.subplots(ncols=2, figsize=(12, 5))\n",
    "scale = (res_df[\"mean_test_score\"].min(), res_df[\"mean_test_score\"].max())\n",
    "\n",
    "c = plot_heatmap(axs[0], res_df[res_df.M == 500], \"sigma\", \"penalty\", \"mean_test_score\", scale)\n",
    "axs[0].set_title(\"M = 500\")\n",
    "c = plot_heatmap(axs[1], res_df[res_df.M == 1000], \"sigma\", \"penalty\", \"mean_test_score\", scale)\n",
    "_ = axs[1].set_title(\"M = 1000\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "source": [],
    "metadata": {
     "collapsed": false
    }
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}