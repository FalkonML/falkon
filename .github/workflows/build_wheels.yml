name: Building Wheels

on: [workflow_dispatch]

jobs:
  wheel:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        # support version based on: https://download.pytorch.org/whl/torch/
        python-version: ['3.10'] #['3.8', '3.9', '3.10', '3.11']
        torch-version: [2.0.0] #[1.11.0, 1.13.0, 2.0.0]
        cuda-version: ['cu118'] #['cpu', 'cu113', 'cu115', 'cu116', 'cu117', 'cu118']
        exclude:
          - torch-version: 1.11.0
            python-version: '3.11'
          - torch-version: 1.11.0
            cuda-version: 'cu116'
          - torch-version: 1.11.0
            cuda-version: 'cu117'
          - torch-version: 1.11.0
            cuda-version: 'cu118'

          - torch-version: 1.13.0
            cuda-version: 'cu102'
          - torch-version: 1.13.0
            cuda-version: 'cu113'
          - torch-version: 1.13.0
            cuda-version: 'cu115'
          - torch-version: 1.13.0
            cuda-version: 'cu118'

          - torch-version: 2.0.0
            cuda-version: 'cu102'
          - torch-version: 2.0.0
            cuda-version: 'cu113'
          - torch-version: 2.0.0
            cuda-version: 'cu115'
          - torch-version: 2.0.0
            cuda-version: 'cu116'

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Upgrade pip
        run: |
          pip install --upgrade setuptools
          pip install ninja

      - name: Free up disk space
        if: ${{ runner.os == 'Linux' }}
        run: |
          sudo rm -rf /usr/share/dotnet

      - name: Install CUDA ${{ matrix.cuda-version }}
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          bash .github/workflows/cuda/${{ runner.os }}.sh ${{ matrix.cuda-version }}

      - name: Install PyTorch ${{ matrix.torch-version }}+${{ matrix.cuda-version }}
        run: |
          pip install numpy scipy
          pip install torch==${{ matrix.torch-version }} --extra-index-url https://download.pytorch.org/whl/${{ matrix.cuda-version }}
          python -c "import torch; print('PyTorch:', torch.__version__)"
          python -c "import torch; print('CUDA:', torch.version.cuda)"
          python -c "import torch; print('CUDA Available:', torch.cuda.is_available())"

      - name: Install build prerequisites
        run: |
          pip install wheel

      - name: Install main package for CPU
        if: ${{ matrix.cuda-version == 'cpu' }}
        run: |
          FORCE_ONLY_CPU=1 pip install -e .

      - name: Install main package for GPU
        if: ${{ matrix.cuda-version != 'cpu' }}
        run: |
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          pip install -e .
        shell:
          bash

      - name: Test installation
        run: |
          python -c "import falkon; print('falkon:', falkon.__version__)" 

      - name: Build wheel
        run: |
          pip install wheel
          source .github/workflows/cuda/${{ runner.os }}-env.sh ${{ matrix.cuda-version }}
          python setup.py bdist_wheel --dist-dir=dist
        shell:
          bash

      - name: Upload wheel
        uses: actions/upload-artifact@v3
        with:
          name: torch-${{ matrix.torch-version }}_${{ matrix.cuda-version }}
          path: dist/*.whl
